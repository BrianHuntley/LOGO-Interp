
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftPLUSMINUSleftTIMESDIVIDEBK CS DIVIDE FD ID INTEGER LT MINUS PLUS PRINT REPEAT RT TIMES\n    program : stmt_list\n\n    stmt_list : stmt stmt_list\n              | empty\n\n    stmt : FD exp\n         | BK exp\n         | RT exp\n         | LT exp\n         | REPEAT exp '[' stmt_list ']'\n         | ID '=' exp\n         | PRINT exp\n         | CS\n\n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp TIMES exp\n        | exp DIVIDE exp\n        | INTEGER\n        | ID\n        | '(' exp ')'\n    empty :"
    
_lr_action_items = {'FD':([0,3,12,14,15,16,18,19,20,23,29,30,31,32,33,34,35,37,],[5,5,-11,-4,-16,-17,-5,-6,-7,-10,5,-9,-12,-13,-14,-15,-18,-8,]),'BK':([0,3,12,14,15,16,18,19,20,23,29,30,31,32,33,34,35,37,],[6,6,-11,-4,-16,-17,-5,-6,-7,-10,6,-9,-12,-13,-14,-15,-18,-8,]),'RT':([0,3,12,14,15,16,18,19,20,23,29,30,31,32,33,34,35,37,],[7,7,-11,-4,-16,-17,-5,-6,-7,-10,7,-9,-12,-13,-14,-15,-18,-8,]),'LT':([0,3,12,14,15,16,18,19,20,23,29,30,31,32,33,34,35,37,],[8,8,-11,-4,-16,-17,-5,-6,-7,-10,8,-9,-12,-13,-14,-15,-18,-8,]),'REPEAT':([0,3,12,14,15,16,18,19,20,23,29,30,31,32,33,34,35,37,],[9,9,-11,-4,-16,-17,-5,-6,-7,-10,9,-9,-12,-13,-14,-15,-18,-8,]),'ID':([0,3,5,6,7,8,9,11,12,14,15,16,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,37,],[10,10,16,16,16,16,16,16,-11,-4,-16,-17,16,-5,-6,-7,16,-10,16,16,16,16,10,-9,-12,-13,-14,-15,-18,-8,]),'PRINT':([0,3,12,14,15,16,18,19,20,23,29,30,31,32,33,34,35,37,],[11,11,-11,-4,-16,-17,-5,-6,-7,-10,11,-9,-12,-13,-14,-15,-18,-8,]),'CS':([0,3,12,14,15,16,18,19,20,23,29,30,31,32,33,34,35,37,],[12,12,-11,-4,-16,-17,-5,-6,-7,-10,12,-9,-12,-13,-14,-15,-18,-8,]),'$end':([0,1,2,3,4,12,13,14,15,16,18,19,20,23,30,31,32,33,34,35,37,],[-19,0,-1,-19,-3,-11,-2,-4,-16,-17,-5,-6,-7,-10,-9,-12,-13,-14,-15,-18,-8,]),']':([3,4,12,13,14,15,16,18,19,20,23,29,30,31,32,33,34,35,36,37,],[-19,-3,-11,-2,-4,-16,-17,-5,-6,-7,-10,-19,-9,-12,-13,-14,-15,-18,37,-8,]),'INTEGER':([5,6,7,8,9,11,17,22,24,25,26,27,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'(':([5,6,7,8,9,11,17,22,24,25,26,27,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'=':([10,],[22,]),'PLUS':([14,15,16,18,19,20,21,23,28,30,31,32,33,34,35,],[24,-16,-17,24,24,24,24,24,24,24,-12,-13,-14,-15,-18,]),'MINUS':([14,15,16,18,19,20,21,23,28,30,31,32,33,34,35,],[25,-16,-17,25,25,25,25,25,25,25,-12,-13,-14,-15,-18,]),'TIMES':([14,15,16,18,19,20,21,23,28,30,31,32,33,34,35,],[26,-16,-17,26,26,26,26,26,26,26,26,26,-14,-15,-18,]),'DIVIDE':([14,15,16,18,19,20,21,23,28,30,31,32,33,34,35,],[27,-16,-17,27,27,27,27,27,27,27,27,27,-14,-15,-18,]),'[':([15,16,21,31,32,33,34,35,],[-16,-17,29,-12,-13,-14,-15,-18,]),')':([15,16,28,31,32,33,34,35,],[-16,-17,35,-12,-13,-14,-15,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,29,],[2,13,36,]),'stmt':([0,3,29,],[3,3,3,]),'empty':([0,3,29,],[4,4,4,]),'exp':([5,6,7,8,9,11,17,22,24,25,26,27,],[14,18,19,20,21,23,28,30,31,32,33,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_grammar','logo_gram.py',16),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_grammar','logo_gram.py',18),
  ('stmt_list -> empty','stmt_list',1,'p_grammar','logo_gram.py',19),
  ('stmt -> FD exp','stmt',2,'p_grammar','logo_gram.py',21),
  ('stmt -> BK exp','stmt',2,'p_grammar','logo_gram.py',22),
  ('stmt -> RT exp','stmt',2,'p_grammar','logo_gram.py',23),
  ('stmt -> LT exp','stmt',2,'p_grammar','logo_gram.py',24),
  ('stmt -> REPEAT exp [ stmt_list ]','stmt',5,'p_grammar','logo_gram.py',25),
  ('stmt -> ID = exp','stmt',3,'p_grammar','logo_gram.py',26),
  ('stmt -> PRINT exp','stmt',2,'p_grammar','logo_gram.py',27),
  ('stmt -> CS','stmt',1,'p_grammar','logo_gram.py',28),
  ('exp -> exp PLUS exp','exp',3,'p_grammar','logo_gram.py',30),
  ('exp -> exp MINUS exp','exp',3,'p_grammar','logo_gram.py',31),
  ('exp -> exp TIMES exp','exp',3,'p_grammar','logo_gram.py',32),
  ('exp -> exp DIVIDE exp','exp',3,'p_grammar','logo_gram.py',33),
  ('exp -> INTEGER','exp',1,'p_grammar','logo_gram.py',34),
  ('exp -> ID','exp',1,'p_grammar','logo_gram.py',35),
  ('exp -> ( exp )','exp',3,'p_grammar','logo_gram.py',36),
  ('empty -> <empty>','empty',0,'p_empty','logo_gram.py',41),
]
