Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt stmt_list
Rule 3     stmt_list -> empty
Rule 4     stmt -> FD exp
Rule 5     stmt -> BK exp
Rule 6     stmt -> RT exp
Rule 7     stmt -> LT exp
Rule 8     stmt -> REPEAT exp [ stmt_list ]
Rule 9     stmt -> ID = exp
Rule 10    stmt -> PRINT exp
Rule 11    stmt -> CS
Rule 12    exp -> exp PLUS exp
Rule 13    exp -> exp MINUS exp
Rule 14    exp -> exp TIMES exp
Rule 15    exp -> exp DIVIDE exp
Rule 16    exp -> INTEGER
Rule 17    exp -> ID
Rule 18    exp -> ( exp )
Rule 19    empty -> <empty>

Terminals, with rules where they appear

(                    : 18
)                    : 18
=                    : 9
BK                   : 5
CS                   : 11
DIVIDE               : 15
FD                   : 4
ID                   : 9 17
INTEGER              : 16
LT                   : 7
MINUS                : 13
PLUS                 : 12
PRINT                : 10
REPEAT               : 8
RT                   : 6
TIMES                : 14
[                    : 8
]                    : 8
error                : 

Nonterminals, with rules where they appear

empty                : 3
exp                  : 4 5 6 7 8 9 10 12 12 13 13 14 14 15 15 18
program              : 0
stmt                 : 2
stmt_list            : 1 2 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . empty
    (4) stmt -> . FD exp
    (5) stmt -> . BK exp
    (6) stmt -> . RT exp
    (7) stmt -> . LT exp
    (8) stmt -> . REPEAT exp [ stmt_list ]
    (9) stmt -> . ID = exp
    (10) stmt -> . PRINT exp
    (11) stmt -> . CS
    (19) empty -> .

    FD              shift and go to state 5
    BK              shift and go to state 6
    RT              shift and go to state 7
    LT              shift and go to state 8
    REPEAT          shift and go to state 9
    ID              shift and go to state 10
    PRINT           shift and go to state 11
    CS              shift and go to state 12
    $end            reduce using rule 19 (empty -> .)

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 3

    (2) stmt_list -> stmt . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . empty
    (4) stmt -> . FD exp
    (5) stmt -> . BK exp
    (6) stmt -> . RT exp
    (7) stmt -> . LT exp
    (8) stmt -> . REPEAT exp [ stmt_list ]
    (9) stmt -> . ID = exp
    (10) stmt -> . PRINT exp
    (11) stmt -> . CS
    (19) empty -> .

    FD              shift and go to state 5
    BK              shift and go to state 6
    RT              shift and go to state 7
    LT              shift and go to state 8
    REPEAT          shift and go to state 9
    ID              shift and go to state 10
    PRINT           shift and go to state 11
    CS              shift and go to state 12
    $end            reduce using rule 19 (empty -> .)
    ]               reduce using rule 19 (empty -> .)

    stmt                           shift and go to state 3
    stmt_list                      shift and go to state 13
    empty                          shift and go to state 4

state 4

    (3) stmt_list -> empty .

    $end            reduce using rule 3 (stmt_list -> empty .)
    ]               reduce using rule 3 (stmt_list -> empty .)


state 5

    (4) stmt -> FD . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 14

state 6

    (5) stmt -> BK . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 18

state 7

    (6) stmt -> RT . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 19

state 8

    (7) stmt -> LT . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 20

state 9

    (8) stmt -> REPEAT . exp [ stmt_list ]
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 21

state 10

    (9) stmt -> ID . = exp

    =               shift and go to state 22


state 11

    (10) stmt -> PRINT . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 23

state 12

    (11) stmt -> CS .

    FD              reduce using rule 11 (stmt -> CS .)
    BK              reduce using rule 11 (stmt -> CS .)
    RT              reduce using rule 11 (stmt -> CS .)
    LT              reduce using rule 11 (stmt -> CS .)
    REPEAT          reduce using rule 11 (stmt -> CS .)
    ID              reduce using rule 11 (stmt -> CS .)
    PRINT           reduce using rule 11 (stmt -> CS .)
    CS              reduce using rule 11 (stmt -> CS .)
    $end            reduce using rule 11 (stmt -> CS .)
    ]               reduce using rule 11 (stmt -> CS .)


state 13

    (2) stmt_list -> stmt stmt_list .

    $end            reduce using rule 2 (stmt_list -> stmt stmt_list .)
    ]               reduce using rule 2 (stmt_list -> stmt stmt_list .)


state 14

    (4) stmt -> FD exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    FD              reduce using rule 4 (stmt -> FD exp .)
    BK              reduce using rule 4 (stmt -> FD exp .)
    RT              reduce using rule 4 (stmt -> FD exp .)
    LT              reduce using rule 4 (stmt -> FD exp .)
    REPEAT          reduce using rule 4 (stmt -> FD exp .)
    ID              reduce using rule 4 (stmt -> FD exp .)
    PRINT           reduce using rule 4 (stmt -> FD exp .)
    CS              reduce using rule 4 (stmt -> FD exp .)
    $end            reduce using rule 4 (stmt -> FD exp .)
    ]               reduce using rule 4 (stmt -> FD exp .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 15

    (16) exp -> INTEGER .

    PLUS            reduce using rule 16 (exp -> INTEGER .)
    MINUS           reduce using rule 16 (exp -> INTEGER .)
    TIMES           reduce using rule 16 (exp -> INTEGER .)
    DIVIDE          reduce using rule 16 (exp -> INTEGER .)
    FD              reduce using rule 16 (exp -> INTEGER .)
    BK              reduce using rule 16 (exp -> INTEGER .)
    RT              reduce using rule 16 (exp -> INTEGER .)
    LT              reduce using rule 16 (exp -> INTEGER .)
    REPEAT          reduce using rule 16 (exp -> INTEGER .)
    ID              reduce using rule 16 (exp -> INTEGER .)
    PRINT           reduce using rule 16 (exp -> INTEGER .)
    CS              reduce using rule 16 (exp -> INTEGER .)
    $end            reduce using rule 16 (exp -> INTEGER .)
    ]               reduce using rule 16 (exp -> INTEGER .)
    [               reduce using rule 16 (exp -> INTEGER .)
    )               reduce using rule 16 (exp -> INTEGER .)


state 16

    (17) exp -> ID .

    PLUS            reduce using rule 17 (exp -> ID .)
    MINUS           reduce using rule 17 (exp -> ID .)
    TIMES           reduce using rule 17 (exp -> ID .)
    DIVIDE          reduce using rule 17 (exp -> ID .)
    FD              reduce using rule 17 (exp -> ID .)
    BK              reduce using rule 17 (exp -> ID .)
    RT              reduce using rule 17 (exp -> ID .)
    LT              reduce using rule 17 (exp -> ID .)
    REPEAT          reduce using rule 17 (exp -> ID .)
    ID              reduce using rule 17 (exp -> ID .)
    PRINT           reduce using rule 17 (exp -> ID .)
    CS              reduce using rule 17 (exp -> ID .)
    $end            reduce using rule 17 (exp -> ID .)
    ]               reduce using rule 17 (exp -> ID .)
    [               reduce using rule 17 (exp -> ID .)
    )               reduce using rule 17 (exp -> ID .)


state 17

    (18) exp -> ( . exp )
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 28

state 18

    (5) stmt -> BK exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    FD              reduce using rule 5 (stmt -> BK exp .)
    BK              reduce using rule 5 (stmt -> BK exp .)
    RT              reduce using rule 5 (stmt -> BK exp .)
    LT              reduce using rule 5 (stmt -> BK exp .)
    REPEAT          reduce using rule 5 (stmt -> BK exp .)
    ID              reduce using rule 5 (stmt -> BK exp .)
    PRINT           reduce using rule 5 (stmt -> BK exp .)
    CS              reduce using rule 5 (stmt -> BK exp .)
    $end            reduce using rule 5 (stmt -> BK exp .)
    ]               reduce using rule 5 (stmt -> BK exp .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 19

    (6) stmt -> RT exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    FD              reduce using rule 6 (stmt -> RT exp .)
    BK              reduce using rule 6 (stmt -> RT exp .)
    RT              reduce using rule 6 (stmt -> RT exp .)
    LT              reduce using rule 6 (stmt -> RT exp .)
    REPEAT          reduce using rule 6 (stmt -> RT exp .)
    ID              reduce using rule 6 (stmt -> RT exp .)
    PRINT           reduce using rule 6 (stmt -> RT exp .)
    CS              reduce using rule 6 (stmt -> RT exp .)
    $end            reduce using rule 6 (stmt -> RT exp .)
    ]               reduce using rule 6 (stmt -> RT exp .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 20

    (7) stmt -> LT exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    FD              reduce using rule 7 (stmt -> LT exp .)
    BK              reduce using rule 7 (stmt -> LT exp .)
    RT              reduce using rule 7 (stmt -> LT exp .)
    LT              reduce using rule 7 (stmt -> LT exp .)
    REPEAT          reduce using rule 7 (stmt -> LT exp .)
    ID              reduce using rule 7 (stmt -> LT exp .)
    PRINT           reduce using rule 7 (stmt -> LT exp .)
    CS              reduce using rule 7 (stmt -> LT exp .)
    $end            reduce using rule 7 (stmt -> LT exp .)
    ]               reduce using rule 7 (stmt -> LT exp .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 21

    (8) stmt -> REPEAT exp . [ stmt_list ]
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    [               shift and go to state 29
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 22

    (9) stmt -> ID = . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 30

state 23

    (10) stmt -> PRINT exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    FD              reduce using rule 10 (stmt -> PRINT exp .)
    BK              reduce using rule 10 (stmt -> PRINT exp .)
    RT              reduce using rule 10 (stmt -> PRINT exp .)
    LT              reduce using rule 10 (stmt -> PRINT exp .)
    REPEAT          reduce using rule 10 (stmt -> PRINT exp .)
    ID              reduce using rule 10 (stmt -> PRINT exp .)
    PRINT           reduce using rule 10 (stmt -> PRINT exp .)
    CS              reduce using rule 10 (stmt -> PRINT exp .)
    $end            reduce using rule 10 (stmt -> PRINT exp .)
    ]               reduce using rule 10 (stmt -> PRINT exp .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 24

    (12) exp -> exp PLUS . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 31

state 25

    (13) exp -> exp MINUS . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 32

state 26

    (14) exp -> exp TIMES . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 33

state 27

    (15) exp -> exp DIVIDE . exp
    (12) exp -> . exp PLUS exp
    (13) exp -> . exp MINUS exp
    (14) exp -> . exp TIMES exp
    (15) exp -> . exp DIVIDE exp
    (16) exp -> . INTEGER
    (17) exp -> . ID
    (18) exp -> . ( exp )

    INTEGER         shift and go to state 15
    ID              shift and go to state 16
    (               shift and go to state 17

    exp                            shift and go to state 34

state 28

    (18) exp -> ( exp . )
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    )               shift and go to state 35
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 29

    (8) stmt -> REPEAT exp [ . stmt_list ]
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . empty
    (4) stmt -> . FD exp
    (5) stmt -> . BK exp
    (6) stmt -> . RT exp
    (7) stmt -> . LT exp
    (8) stmt -> . REPEAT exp [ stmt_list ]
    (9) stmt -> . ID = exp
    (10) stmt -> . PRINT exp
    (11) stmt -> . CS
    (19) empty -> .

    FD              shift and go to state 5
    BK              shift and go to state 6
    RT              shift and go to state 7
    LT              shift and go to state 8
    REPEAT          shift and go to state 9
    ID              shift and go to state 10
    PRINT           shift and go to state 11
    CS              shift and go to state 12
    ]               reduce using rule 19 (empty -> .)

    stmt_list                      shift and go to state 36
    stmt                           shift and go to state 3
    empty                          shift and go to state 4

state 30

    (9) stmt -> ID = exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    FD              reduce using rule 9 (stmt -> ID = exp .)
    BK              reduce using rule 9 (stmt -> ID = exp .)
    RT              reduce using rule 9 (stmt -> ID = exp .)
    LT              reduce using rule 9 (stmt -> ID = exp .)
    REPEAT          reduce using rule 9 (stmt -> ID = exp .)
    ID              reduce using rule 9 (stmt -> ID = exp .)
    PRINT           reduce using rule 9 (stmt -> ID = exp .)
    CS              reduce using rule 9 (stmt -> ID = exp .)
    $end            reduce using rule 9 (stmt -> ID = exp .)
    ]               reduce using rule 9 (stmt -> ID = exp .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27


state 31

    (12) exp -> exp PLUS exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    PLUS            reduce using rule 12 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 12 (exp -> exp PLUS exp .)
    FD              reduce using rule 12 (exp -> exp PLUS exp .)
    BK              reduce using rule 12 (exp -> exp PLUS exp .)
    RT              reduce using rule 12 (exp -> exp PLUS exp .)
    LT              reduce using rule 12 (exp -> exp PLUS exp .)
    REPEAT          reduce using rule 12 (exp -> exp PLUS exp .)
    ID              reduce using rule 12 (exp -> exp PLUS exp .)
    PRINT           reduce using rule 12 (exp -> exp PLUS exp .)
    CS              reduce using rule 12 (exp -> exp PLUS exp .)
    $end            reduce using rule 12 (exp -> exp PLUS exp .)
    ]               reduce using rule 12 (exp -> exp PLUS exp .)
    [               reduce using rule 12 (exp -> exp PLUS exp .)
    )               reduce using rule 12 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27

  ! TIMES           [ reduce using rule 12 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 12 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]


state 32

    (13) exp -> exp MINUS exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    PLUS            reduce using rule 13 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 13 (exp -> exp MINUS exp .)
    FD              reduce using rule 13 (exp -> exp MINUS exp .)
    BK              reduce using rule 13 (exp -> exp MINUS exp .)
    RT              reduce using rule 13 (exp -> exp MINUS exp .)
    LT              reduce using rule 13 (exp -> exp MINUS exp .)
    REPEAT          reduce using rule 13 (exp -> exp MINUS exp .)
    ID              reduce using rule 13 (exp -> exp MINUS exp .)
    PRINT           reduce using rule 13 (exp -> exp MINUS exp .)
    CS              reduce using rule 13 (exp -> exp MINUS exp .)
    $end            reduce using rule 13 (exp -> exp MINUS exp .)
    ]               reduce using rule 13 (exp -> exp MINUS exp .)
    [               reduce using rule 13 (exp -> exp MINUS exp .)
    )               reduce using rule 13 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27

  ! TIMES           [ reduce using rule 13 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 13 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]


state 33

    (14) exp -> exp TIMES exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    PLUS            reduce using rule 14 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 14 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 14 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 14 (exp -> exp TIMES exp .)
    FD              reduce using rule 14 (exp -> exp TIMES exp .)
    BK              reduce using rule 14 (exp -> exp TIMES exp .)
    RT              reduce using rule 14 (exp -> exp TIMES exp .)
    LT              reduce using rule 14 (exp -> exp TIMES exp .)
    REPEAT          reduce using rule 14 (exp -> exp TIMES exp .)
    ID              reduce using rule 14 (exp -> exp TIMES exp .)
    PRINT           reduce using rule 14 (exp -> exp TIMES exp .)
    CS              reduce using rule 14 (exp -> exp TIMES exp .)
    $end            reduce using rule 14 (exp -> exp TIMES exp .)
    ]               reduce using rule 14 (exp -> exp TIMES exp .)
    [               reduce using rule 14 (exp -> exp TIMES exp .)
    )               reduce using rule 14 (exp -> exp TIMES exp .)

  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]


state 34

    (15) exp -> exp DIVIDE exp .
    (12) exp -> exp . PLUS exp
    (13) exp -> exp . MINUS exp
    (14) exp -> exp . TIMES exp
    (15) exp -> exp . DIVIDE exp

    PLUS            reduce using rule 15 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 15 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 15 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 15 (exp -> exp DIVIDE exp .)
    FD              reduce using rule 15 (exp -> exp DIVIDE exp .)
    BK              reduce using rule 15 (exp -> exp DIVIDE exp .)
    RT              reduce using rule 15 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 15 (exp -> exp DIVIDE exp .)
    REPEAT          reduce using rule 15 (exp -> exp DIVIDE exp .)
    ID              reduce using rule 15 (exp -> exp DIVIDE exp .)
    PRINT           reduce using rule 15 (exp -> exp DIVIDE exp .)
    CS              reduce using rule 15 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 15 (exp -> exp DIVIDE exp .)
    ]               reduce using rule 15 (exp -> exp DIVIDE exp .)
    [               reduce using rule 15 (exp -> exp DIVIDE exp .)
    )               reduce using rule 15 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 24 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 26 ]
  ! DIVIDE          [ shift and go to state 27 ]


state 35

    (18) exp -> ( exp ) .

    PLUS            reduce using rule 18 (exp -> ( exp ) .)
    MINUS           reduce using rule 18 (exp -> ( exp ) .)
    TIMES           reduce using rule 18 (exp -> ( exp ) .)
    DIVIDE          reduce using rule 18 (exp -> ( exp ) .)
    FD              reduce using rule 18 (exp -> ( exp ) .)
    BK              reduce using rule 18 (exp -> ( exp ) .)
    RT              reduce using rule 18 (exp -> ( exp ) .)
    LT              reduce using rule 18 (exp -> ( exp ) .)
    REPEAT          reduce using rule 18 (exp -> ( exp ) .)
    ID              reduce using rule 18 (exp -> ( exp ) .)
    PRINT           reduce using rule 18 (exp -> ( exp ) .)
    CS              reduce using rule 18 (exp -> ( exp ) .)
    $end            reduce using rule 18 (exp -> ( exp ) .)
    ]               reduce using rule 18 (exp -> ( exp ) .)
    [               reduce using rule 18 (exp -> ( exp ) .)
    )               reduce using rule 18 (exp -> ( exp ) .)


state 36

    (8) stmt -> REPEAT exp [ stmt_list . ]

    ]               shift and go to state 37


state 37

    (8) stmt -> REPEAT exp [ stmt_list ] .

    FD              reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)
    BK              reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)
    RT              reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)
    LT              reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)
    REPEAT          reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)
    ID              reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)
    PRINT           reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)
    CS              reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)
    $end            reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)
    ]               reduce using rule 8 (stmt -> REPEAT exp [ stmt_list ] .)

